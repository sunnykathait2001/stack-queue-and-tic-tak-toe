#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

struct Queue{
	int capacity;
	int size;
	int front , rear;
	int *arr;
};

struct Queue *createQueue(int capacity){
	struct Queue *q = (struct Queue *)malloc(sizeof(struct Queue));
	if(!q){
		return NULL;
	}
	q->capacity = capacity;
	q->front = q->rear = -1;
	q->size = -1;
	q->arr = (int *)malloc(capacity * sizeof(int));
	if(!q->arr){
		return NULL;
	}
	
	return q;
}

int isEmpty(struct Queue *q){
	return (q->size == -1);
}

int isFull(struct Queue *q){
	return (q->size == q->capacity-1);
}

void enQueue(struct Queue *q , int data){
	if(isFull(q)){
		printf("The Queue is Full.\n");
	}else{
		q->rear = (q->rear + 1) % q->capacity;
		q->arr[q->rear] = data;
		if(q->front == -1){
			q->front = q->rear;
		}
		q->size += 1;
	}
}

int deQueue(struct Queue *q){
	int data = INT_MIN; // something that is not in the Queue
	if(isEmpty(q)){
		printf("The Queue is empty.\n");
		return data;
	}
	data = q->arr[q->front];
	if(q->front == q->rear){
		q->front = q->rear = -1;
		q->size = 0;
	}else{
		q->front = (q->front + 1) % q->capacity;
		q->size -= 1;
	}

	return data;
}

void display(struct Queue *q){
	int i = q->front;
	while(i != q->rear + 1){
		printf("%d ",q->arr[i]);
		i += 1;
	}
	printf("\n");
}

int main(){
	struct Queue *q = createQueue(5);
	enQueue(q,1);
	enQueue(q,2);
	enQueue(q,3);
	enQueue(q,4);
	enQueue(q,5);
	
	display(q);
	
	int temp = deQueue(q);
	
	display(q);
	
	printf("The deQueued number is : %d ",temp);
	
	return 0;
}
